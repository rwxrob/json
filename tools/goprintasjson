#!/usr/bin/env bash
# https://github.com/rwxrob/json (tools)
# filter for use from vi/m
# type name on any line in vim, then !!goprintasjson (tab comp works)

read -r name

echo "

// ---------------------------- marshaling ----------------------------

// TODO change import "encoding/json" to "github.com/rwxrob/json"

func (s $name) MarshalJSON() ([]byte, error) {
    buf := ""
    // TODO
    return []byte(buf),nil
}

// JSONL implements rwxrob/json.AsJSON.
func (s $name) JSON() ([]byte, error) {return s.MarshalJSON()}
func (s $name) JSON() ([]byte, error) {return json.Marshal(s)}

// JSONL implements rwxrob/json.AsJSON.
func (s $name) JSONL() ([]byte, error) {
    return s.MarshalIndent(\"  \",\"  \")
}
func (s $name) JSONL() ([]byte, error) {
    return json.MarshalIndent(s,\"  \",\"  \")
}

// String implements rwxrob/json.Stringer and fmt.Stringer.
func (s $name) String() string {
  byt,err := s.JSON()
  if err != nil {
    log.Print(err)
  }
  return string(byt)
}

// StringLong implements rwxrob/json.Stringer.
func (s $name) StringLong() string {
  byt,err := s.JSONL()
  if err != nil {
    log.Print(err)
  }
  return string(byt)
}

// String implements rwxrob/json.Printer.
func (s $name) Print() { fmt.Println(s.String()) }

// PrintLong implements rwxrob/json.Printer.
func (s $name) PrintLong() { fmt.Println(s.StringLong()) }

// Log implements rwxrob/json.Logger.
func (s $name) Log() { log.Print(s.String()) }

// LogLong implements rwxrob/json.Logger.
func (s $name) LogLong() { each.Log(to.Lines(s.StringLong())) }
"
